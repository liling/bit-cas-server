<?xml version="1.0" encoding="UTF-8"?>
<!--
    | deployerConfigContext.xml centralizes into one file some of the declarative configuration that
    | all CAS deployers will need to modify.
    |
    | This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
    | The beans declared in this file are instantiated at context initialization time by the Spring 
    | ContextLoaderListener declared in web.xml.  It finds this file because this
    | file is among those declared in the context parameter "contextConfigLocation".
    |
    | By far the most common change you will need to make in this file is to change the last bean
    | declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
    | one implementing your approach for authenticating usernames and passwords.
    +-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
                           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">
    
    <!-- LDAP 数据源 -->
    <bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
        <property name="pooled" value="false"/>
        <property name="urls">
            <list>
                <value>ldap://ldap.bit.edu.cn/</value>
                <value>ldap://ldap2.bit.edu.cn/</value>
            </list>
        </property>
        <property name="baseEnvironmentProperties">
            <!--
         Set the LDAP connect and read timeout(in ms) for the java ldap class
         See http://java.sun.com/products/jndi/tutorial/ldap/connect/create.html
        -->
            <map>
                <entry>
                    <key>
                        <value>com.sun.jndi.ldap.connect.timeout</value>
                    </key>
                    <value>2000</value>
                </entry>
                <entry>
                    <key>
                        <value>com.sun.jndi.ldap.read.timeout</value>
                    </key>
                    <value>2000</value>
                </entry>
                <entry>
                    <key>
                        <value>java.naming.security.authentication</value>
                    </key>
                    <value>simple</value>
                </entry>
            </map>
        </property>
    </bean>
    
    <!--
     | This bean declares our AuthenticationManager.  The CentralAuthenticationService service bean
     | declared in applicationContext.xml picks up this AuthenticationManager by reference to its id, 
     | "authenticationManager".  Most deployers will be able to use the default AuthenticationManager
     | implementation and so do not need to change the class of this bean.  We include the whole
     | AuthenticationManager here in the userConfigContext.xml so that you can see the things you will
     | need to change in context.
     +-->
    <bean id="authenticationManager"
        class="org.jasig.cas.authentication.AuthenticationManagerImpl">
        <!--
        | This is the List of CredentialToPrincipalResolvers that identify what Principal is trying to authenticate.
        | The AuthenticationManagerImpl considers them in order, finding a CredentialToPrincipalResolver which 
        | supports the presented credentials.
        |
        | AuthenticationManagerImpl uses these resolvers for two purposes.  First, it uses them to identify the Principal
        | attempting to authenticate to CAS /login .  In the default configuration, it is the DefaultCredentialsToPrincipalResolver
        | that fills this role.  If you are using some other kind of credentials than UsernamePasswordCredentials, you will need to replace
        | DefaultCredentialsToPrincipalResolver with a CredentialsToPrincipalResolver that supports the credentials you are
        | using.
        |
        | Second, AuthenticationManagerImpl uses these resolvers to identify a service requesting a proxy granting ticket. 
        | In the default configuration, it is the HttpBasedServiceCredentialsToPrincipalResolver that serves this purpose. 
        | You will need to change this list if you are identifying services by something more or other than their callback URL.
        +-->
        <property name="credentialsToPrincipalResolvers">
            <list>
                <!-- 通过 LDAP 数据库检索目前登录的用户究竟是谁 -->
                <bean class="org.jasig.cas.authentication.principal.CredentialsToLDAPAttributePrincipalResolver">
                    <property name="credentialsToPrincipalResolver">
                        <bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver" />
                    </property>
                    <!-- 允许用户输入工号或者电子邮件 -->
                    <property name="filter" value="(|(employeeNumber=%u)(mail=%u))" />
                    <property name="principalAttributeName" value="employeeNumber" />
                    <property name="searchBase" value="ou=people,dc=bit,dc=edu,dc=cn" />
                    <property name="contextSource" ref="contextSource" />
                    <property name="attributeRepository">
                        <ref bean="attributeRepository" />
                    </property>
                </bean>

                <!--
                 HttpBasedServiceCredentialsToPrincipalResolver supports HttpBasedCredentials.  It supports the CAS 2.0 approach of
                 | authenticating services by SSL callback, extracting the callback URL from the Credentials and representing it as a
                 | SimpleService identified by that callback URL.
                 |
                 | If you are representing services by something more or other than an HTTPS URL whereat they are able to
                 | receive a proxy callback, you will need to change this bean declaration (or add additional declarations).
                 +-->
                <bean class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
            </list>
        </property>
        
        <!--
            | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
            | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
            | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
            | until it finds one that both supports the Credentials presented and succeeds in authenticating.
            +-->
        <property name="authenticationHandlers">
            <list>
                <!--
                 | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
                 | a server side SSL certificate.
                 +-->
                <bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
                    p:httpClient-ref="httpClient" />
                
                <!-- 通过 LDAP Bind 来检查用户的密码 -->
                <bean class="org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler" >
                    <property name="filter" value="(|(employeeNumber=%u)(mail=%u))" />
                    <property name="searchBase" value="ou=people,dc=bit,dc=edu,dc=cn" />
                    <property name="contextSource" ref="contextSource" />
                </bean>
            </list>
        </property>
    </bean>
    
    
    <!--
    This bean defines the security roles for the Services Management application.  Simple deployments can use the in-memory version.
    More robust deployments will want to use another option, such as the Jdbc version.
    
    The name of this should remain "userDetailsService" in order for Spring Security to find it.
    
    To use this, you should add an entry similar to the following between the two value tags:
    battags=notused,ROLE_ADMIN
    
    where battags is the username you want to grant access to.  You can put one entry per line.
    -->
    <!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />-->
    
    <sec:user-service id="userDetailsService">
        <sec:user name="6120103160" authorities="ROLE_ADMIN" />
        <sec:user name="6120104690" authorities="ROLE_ADMIN" />
    </sec:user-service>
    
    <!-- 通过 LDAP 提供用户属性 -->
    <bean id="attributeRepository"
          class="org.jasig.services.persondir.support.ldap.LdapPersonAttributeDao">
        <property name="contextSource" ref="contextSource" />
        <property name="baseDN" value="ou=people,dc=bit,dc=edu,dc=cn" />
        <property name="requireAllQueryAttributes" value="true" />
        
        <!-- 查询时用户名对应的属性 -->
        <property name="queryAttributeMapping">
            <map>
                <entry key="username" value="employeeNumber" />
            </map>
        </property>
        
        <!-- 查询结果中 LDAP 属性映射为 -->
        <property name="resultAttributeMapping">
            <map>
                <entry key="cn" value="Name"/>
                <entry key="employeeType" value="Status"/>
            </map>
        </property>
    </bean>
    
    <bean id="serviceRegistryDao"
          class="org.jasig.cas.services.JpaServiceRegistryDaoImpl"
          p:entityManagerFactory-ref="entityManagerFactory" />
    
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="true"/>
                <property name="showSql" value="true" />
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>
    
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <jee:jndi-lookup id="dataSource" jndi-name="jdbc/LocalMySQL" />

</beans>
